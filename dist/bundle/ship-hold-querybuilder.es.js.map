{"version":3,"file":"ship-hold-querybuilder.es.js","sources":["../src/lib/util.js","../src/lib/nodes.js","../src/builders/conditions.js","../src/lib/proxy-condition.js","../src/builders/clause.js","../src/builders/where.js","../src/builders/with.js","../src/builders/select.js","../src/builders/update.js","../src/builders/insert.js","../src/builders/delete.js","../src/lib/aggregations.js","../src/lib/operators.js"],"sourcesContent":["import { expressionNode, pointerNode } from './nodes';\nexport const fluentMethod = (fn) => function (...args) {\n    fn.bind(this)(...args);\n    return this;\n};\nexport const isBuildable = (val) => val !== null && val.build && typeof val.build === 'function';\nexport const isSQLNodeValue = (val) => val && typeof val.value !== 'undefined';\nexport const isFunctionNode = (val) => val.functionName !== undefined;\nexport const identity = val => val;\nexport const selectLikeExpression = (val) => {\n    if (isBuildable(val)) {\n        // function call node\n        if (isFunctionNode(val)) {\n            return val;\n        }\n        // expression\n        return expressionNode(val);\n    }\n    if (typeof val === 'string') {\n        return pointerNode(val);\n    }\n    if (isSQLNodeValue(val)) {\n        return isBuildable(val.value) ? expressionNode(val) : pointerNode(val);\n    }\n    throw new Error(`${val} is not a FromAble`);\n};\nexport const eventuallyAddComposite = (target) => (composite, keyword) => {\n    if (composite.length) {\n        if (keyword) {\n            target.add(keyword.toUpperCase());\n        }\n        target.add(composite);\n    }\n};\n","import { fluentMethod, identity, isBuildable, isFunctionNode, isSQLNodeValue } from './util';\nconst STAR = '*';\nconst isParamRegexp = /^\\$/;\nconst buildStringMethodFactory = (fn) => function (params, offset) {\n    const { node: { value } } = this;\n    const isParam = isParamRegexp.test(value);\n    const text = isParam ? '$' + offset : fn(value);\n    const values = isParam ? [params[value.substr(1)]] : [];\n    return { text, values };\n};\nconst isWrappedRegexp = /'(.*)'|\"(.*)\"|\\((.*)\\)|^\\$/;\nconst testWrap = (input) => isWrappedRegexp.test(input);\nconst wrap = (string, quote = '\"') => (testWrap(string) || string === STAR) ? string : quote + string + quote;\nconst parseValue = (value) => {\n    switch (typeof value) {\n        case 'string':\n            return wrap(value, `'`);\n        case 'object': {\n            if (value === null) {\n                return 'NULL';\n            }\n            if (Array.isArray(value)) {\n                return '(' + value.map(parseValue).join(',') + ')';\n            }\n            // Dates\n            if (value.toISOString) {\n                return wrap(value.toISOString(), `'`);\n            }\n            return `'${JSON.stringify(value)}'`;\n        }\n        default:\n            return value;\n    }\n};\nconst mapIdentityClone = {\n    clone() {\n        return this.map(identity);\n    }\n};\nconst pointerNodeProto = Object.assign({\n    build(params, offset) {\n        const { node } = this;\n        let val;\n        if (testWrap(node.value)) {\n            val = node.value;\n        }\n        else {\n            const [first, ...rest] = node.value.split('.');\n            const parts = [wrap(first)];\n            if (rest.length > 0) {\n                parts.push(wrap(rest.join('.')));\n            }\n            val = parts.join('.');\n        }\n        const text = node.as ? `${val} AS ${wrap(node.as)}` : val;\n        return { text, values: [] };\n    },\n    map(fn) {\n        return pointerNode(Object.assign({}, this.node, { value: fn(this.node.value) }));\n    }\n}, mapIdentityClone);\nconst expressionNodeProto = {\n    build(params, offset) {\n        const { node } = this;\n        const { text, values } = node.value.build(params, offset);\n        const fullText = node.as ? [`(${text})`, 'AS', wrap(node.as)].join(' ') : `(${text})`;\n        return { text: fullText, values };\n    },\n    map(fn) {\n        return expressionNode(Object.assign({}, this.node, { value: fn(this.node.value) }));\n    },\n    clone() {\n        return this.map(item => item.clone());\n    }\n};\nconst identityNodeProto = Object.assign({\n    build: buildStringMethodFactory(identity),\n    map(fn) {\n        return identityNode(Object.assign({}, this.node, { value: fn(this.node.value) }));\n    }\n}, mapIdentityClone);\n// SQLNode that returns its own value when built\nexport const identityNode = (params) => {\n    const node = isSQLNodeValue(params) === false ? { value: params } : params;\n    return Object.create(identityNodeProto, {\n        node: {\n            get() {\n                return Object.assign({}, node);\n            }\n        }\n    });\n};\nconst compositeNodeProto = {\n    *[Symbol.iterator]() {\n        for (const n of this.nodes) {\n            yield n.node ? n.node : n;\n        }\n    },\n    add: fluentMethod(function (...args) {\n        const nodeArgs = args.map(n => isBuildable(n) ? n : identityNode(n));\n        this.nodes.push(...nodeArgs);\n    }),\n    build(params, offset) {\n        let off = offset;\n        const text = [];\n        const values = [];\n        for (const node of this.nodes) {\n            const { text: newText, values: newVals = [] } = node.build(params, off);\n            text.push(newText);\n            values.push(...newVals);\n            off += newVals.length;\n        }\n        return {\n            text: text.join(this.separator),\n            values\n        };\n    },\n    clone() {\n        const clone = compositeNode({ separator: this.separator });\n        clone.nodes.push(...this.nodes.map(n => n.clone()));\n        return clone;\n    }\n};\nconst valueNodeProto = Object.assign({\n    build: buildStringMethodFactory(parseValue),\n    map(fn) {\n        return valueNode(Object.assign({}, this.node, { value: fn(this.node.value) }));\n    }\n}, mapIdentityClone);\n// SQLNode that returns a scalar value when built\nexport const valueNode = (params) => {\n    const node = isSQLNodeValue(params) ? params : { value: params };\n    return Object.create(valueNodeProto, {\n        node: {\n            get() {\n                return Object.assign({}, node);\n            }\n        }\n    });\n};\n// SQLNode that returns a sql identifier when built\nexport const pointerNode = (params) => {\n    const node = isSQLNodeValue(params) ? params : { value: params };\n    return Object.create(pointerNodeProto, {\n        node: {\n            get() {\n                return Object.assign({}, node);\n            }\n        }\n    });\n};\n// SQLNode made from a sub builder (for subquery)\nexport const expressionNode = (params) => {\n    const node = isSQLNodeValue(params) ? params : { value: params };\n    return Object.create(expressionNodeProto, {\n        node: {\n            get() {\n                return Object.assign({}, node);\n            }\n        }\n    });\n};\n// SQLNode made of nodes\nexport const compositeNode = ({ separator = ' ' } = {\n    separator: ' '\n}) => Object.create(compositeNodeProto, {\n    nodes: { value: [] },\n    length: {\n        get() {\n            return this.nodes.length;\n        }\n    },\n    separator: { value: separator }\n});\nconst functionNodeProto = {\n    add: fluentMethod(function (...args) {\n        this.args.push(...args.map(val => {\n            return isFunctionNode(val) ? val : valueNode(val);\n        }));\n    }),\n    build(params, offset) {\n        const argsNode = compositeNode({ separator: ',' });\n        for (const node of this.args) {\n            argsNode.add(node);\n        }\n        const { text: argText, values } = argsNode.build(params, offset);\n        const functionCall = `${this.functionName}(${argText})`;\n        const text = this.alias !== undefined ? `${functionCall} AS \"${this.alias}\"` : functionCall;\n        return {\n            text,\n            values\n        };\n    },\n    clone() {\n        const clone = functionNode(this.functionName, this.alias);\n        clone.args.push(...this.args.map(i => i.clone()));\n        return clone;\n    }\n};\nexport const functionNode = (fnName, alias) => {\n    return Object.create(functionNodeProto, {\n        functionName: { value: fnName },\n        args: { value: [] },\n        alias: { value: alias }\n    });\n};\n","import { compositeNode, expressionNode, valueNode, pointerNode, identityNode, } from '../lib/nodes';\nimport { fluentMethod, isBuildable } from '../lib/util';\nexport var SQLComparisonOperator;\n(function (SQLComparisonOperator) {\n    SQLComparisonOperator[\"EQUAL\"] = \"=\";\n    SQLComparisonOperator[\"LOWER_THAN\"] = \"<\";\n    SQLComparisonOperator[\"LOWER_THAN_OR_EQUAL\"] = \"<=\";\n    SQLComparisonOperator[\"GREATER_THAN\"] = \">\";\n    SQLComparisonOperator[\"GREATER_THAN_OR_EQUAL\"] = \">=\";\n    SQLComparisonOperator[\"NOT_EQUAL\"] = \"<>\";\n    SQLComparisonOperator[\"IS\"] = \"IS\";\n    SQLComparisonOperator[\"IS_NOT\"] = \"IS NOT\";\n    SQLComparisonOperator[\"BETWEEN\"] = \"BETWEEN\";\n    SQLComparisonOperator[\"NOT_BETWEEN\"] = \"NOT BETWEEN\";\n    SQLComparisonOperator[\"BETWEEN_SYMETRIC\"] = \"BETWEEN SYMETRIC\";\n    SQLComparisonOperator[\"NOT_BETWEEN_SYMETRIC\"] = \"NOT BETWEEN SYMETRIC\";\n    SQLComparisonOperator[\"IS_DISTINCT\"] = \"IS DISTINCT\";\n    SQLComparisonOperator[\"IS_NOT_DISTINCT\"] = \"IS NOT DISTINCT\";\n    SQLComparisonOperator[\"LIKE\"] = \"LIKE\";\n    SQLComparisonOperator[\"ILIKE\"] = \"ILIKE\";\n    SQLComparisonOperator[\"CONTAINS\"] = \"@>\";\n    SQLComparisonOperator[\"IS_CONTAINED_BY\"] = \"<@\";\n    SQLComparisonOperator[\"OVERLAP\"] = \"&&\";\n    SQLComparisonOperator[\"CONCATENATE\"] = \"||\";\n    SQLComparisonOperator[\"IN\"] = \"IN\";\n})(SQLComparisonOperator || (SQLComparisonOperator = {}));\nexport const condition = (conditionNodes = compositeNode()) => {\n    return {\n        or(leftOperand, operator, rightOperand) {\n            conditionNodes.add(identityNode('OR'));\n            return this.if(leftOperand, operator, rightOperand);\n        },\n        and(leftOperand, operator, rightOperand) {\n            conditionNodes.add(identityNode('AND'));\n            return this.if(leftOperand, operator, rightOperand);\n        },\n        if: fluentMethod((leftOperand, operator, rightOperand) => {\n            const leftOperandNode = isBuildable(leftOperand) ?\n                expressionNode(leftOperand) :\n                pointerNode(leftOperand);\n            let actualOperator = operator;\n            let actualRightOperand = rightOperand;\n            if (operator === undefined) {\n                conditionNodes.add(leftOperandNode);\n            }\n            else {\n                if (rightOperand === undefined) {\n                    actualRightOperand = operator;\n                    actualOperator = \"=\" /* EQUAL */;\n                }\n                const operatorNode = identityNode(actualOperator);\n                const rightOperandNode = isBuildable(actualRightOperand) ?\n                    expressionNode(actualRightOperand) :\n                    valueNode(actualRightOperand);\n                const whereNode = compositeNode()\n                    .add(leftOperandNode, operatorNode, rightOperandNode);\n                conditionNodes.add(whereNode);\n            }\n        }),\n        build(params = {}, offset = 1) {\n            return conditionNodes.build(params, offset);\n        }\n    };\n};\n","import { condition } from '../builders/conditions';\nimport { compositeNode } from './nodes';\n// Create a condition builder proxy which will be revoked as soon as the main builder is called\nexport default (mainBuilder, nodes) => (leftOperand, operator, rightOperand) => {\n    const conditionNodes = compositeNode();\n    const delegate = condition(conditionNodes)\n        .if(leftOperand, operator, rightOperand);\n    const revocable = Proxy.revocable(delegate, {\n        get(target, property) {\n            if (target[property] && property !== 'build') {\n                return target[property];\n            }\n            nodes.add(conditionNodes);\n            revocable.revoke();\n            return typeof mainBuilder[property] === 'function' ?\n                mainBuilder[property].bind(mainBuilder) :\n                mainBuilder[property];\n        }\n    });\n    return revocable.proxy;\n};\n","import { fluentMethod, selectLikeExpression } from '../lib/util';\nexport const nodeSymbol = Symbol('nodes');\nexport const clauseMixin = (...names) => {\n    const api = {\n        node(name, newNode) {\n            const node = this[nodeSymbol][name];\n            if (newNode === undefined) {\n                return node;\n            }\n            return this[nodeSymbol][name] = newNode;\n        }\n    };\n    for (const name of names) {\n        api[name] = fluentMethod(function (...args) {\n            this[nodeSymbol][name].add(...args.map(selectLikeExpression)); // Technically not all the clause would accept fromable\n        });\n    }\n    return api;\n};\n","import proxy from '../lib/proxy-condition';\nimport { nodeSymbol } from './clause';\nimport { compositeNode } from '../lib/nodes';\nexport default function (leftOperand, operator, rightOperand) {\n    const nodes = this[nodeSymbol].where;\n    let conditionNode = nodes;\n    //if we have already some conditions we add the new one as a AND branch\n    if (nodes.length) {\n        conditionNode = compositeNode();\n        nodes.add('AND', '(', conditionNode, ')');\n    }\n    return proxy(this, conditionNode)(leftOperand, operator, rightOperand);\n}\n","import { fluentMethod } from '../lib/util';\nimport { nodeSymbol } from './clause';\nimport { compositeNode, expressionNode, pointerNode } from '../lib/nodes';\nexport const withAsMixin = () => ({\n    with: fluentMethod(function (label, builder) {\n        const n = this[nodeSymbol].with;\n        const clause = compositeNode();\n        clause.add(pointerNode(label), 'AS', expressionNode({ value: builder }));\n        n.add(clause);\n    })\n});\n","import { compositeNode, identityNode, pointerNode, valueNode, } from '../lib/nodes';\nimport proxy from '../lib/proxy-condition';\nimport { eventuallyAddComposite, fluentMethod, selectLikeExpression } from '../lib/util';\nimport { clauseMixin, nodeSymbol } from './clause';\nimport where from './where';\nimport { withAsMixin } from './with';\nconst joinFunc = (joinType) => function (table, leftOperand, rightOperand) {\n    const node = selectLikeExpression(table);\n    this[nodeSymbol].join.add(identityNode(joinType), node);\n    return leftOperand && rightOperand ? this.on(leftOperand, rightOperand) : this;\n};\nexport var SortDirection;\n(function (SortDirection) {\n    SortDirection[\"ASC\"] = \"ASC\";\n    SortDirection[\"DESC\"] = \"DESC\";\n})(SortDirection || (SortDirection = {}));\nconst proto = Object.assign({\n    join: joinFunc('JOIN'),\n    leftJoin: joinFunc('LEFT JOIN'),\n    rightJoin: joinFunc('RIGHT JOIN'),\n    fullJoin: joinFunc('FULL JOIN'),\n    having(leftOperand, operator, rightOperand) {\n        const { having } = this[nodeSymbol];\n        return proxy(this, having)(leftOperand, operator, rightOperand);\n    },\n    on(leftOperand, operator, rightOperand) {\n        const { join } = this[nodeSymbol];\n        join.add('ON');\n        return proxy(this, join)(leftOperand, operator, rightOperand);\n    },\n    orderBy: fluentMethod(function (column, direction) {\n        const newOrderByNode = compositeNode();\n        newOrderByNode.add(pointerNode(column));\n        const actualDirection = ((direction && direction.toString()) || '').toUpperCase();\n        if (actualDirection === 'ASC' || actualDirection === 'DESC') {\n            newOrderByNode.add(identityNode(actualDirection));\n        }\n        this[nodeSymbol].orderBy.add(newOrderByNode);\n    }),\n    limit: fluentMethod(function (l, offset) {\n        this[nodeSymbol].limit.add(valueNode(l));\n        if (offset) {\n            this[nodeSymbol].limit.add(identityNode('OFFSET'), valueNode(offset));\n        }\n    }),\n    noop: fluentMethod(function () {\n    }),\n    where,\n    build(params = {}, offset = 1) {\n        const queryNode = compositeNode();\n        const nodes = this[nodeSymbol];\n        const add = eventuallyAddComposite(queryNode);\n        add(nodes.with, 'with');\n        add(nodes.select, 'select');\n        add(nodes.from, 'from');\n        add(nodes.join);\n        add(nodes.where, 'where');\n        add(nodes.groupBy, 'group by');\n        add(nodes.having, 'having');\n        add(nodes.orderBy, 'order by');\n        add(nodes.limit, 'limit');\n        return queryNode.build(params, offset);\n    }\n}, withAsMixin(), clauseMixin('from', 'select', 'groupBy'));\nexport const select = (...args) => {\n    const nodes = {\n        orderBy: compositeNode({ separator: ', ' }),\n        limit: compositeNode(),\n        join: compositeNode(),\n        from: compositeNode({ separator: ', ' }),\n        select: compositeNode({ separator: ', ' }),\n        where: compositeNode(),\n        with: compositeNode({ separator: ', ' }),\n        groupBy: compositeNode({ separator: ', ' }),\n        having: compositeNode()\n    };\n    const instance = Object.create(Object.assign({\n        clone() {\n            const clone = select();\n            for (const [key, value] of Object.entries(nodes)) {\n                clone.node(key, value.clone());\n            }\n            return Object.assign(clone, this); // clone all enumerable properties too\n        }\n    }, proto), { [nodeSymbol]: { value: nodes } });\n    if (args.length === 0) {\n        args.push('*');\n    }\n    return instance\n        .select(...args);\n};\n","import { compositeNode, pointerNode, valueNode } from '../lib/nodes';\nimport { eventuallyAddComposite, fluentMethod } from '../lib/util';\nimport where from './where';\nimport { clauseMixin, nodeSymbol } from './clause';\nimport { withAsMixin } from './with';\nconst createSetNode = (prop, value) => compositeNode()\n    .add(pointerNode(prop), '=', valueNode(value));\nconst proto = Object.assign({\n    where,\n    noop: fluentMethod(function () {\n    }),\n    set: fluentMethod(function (prop, value) {\n        const setNodes = value === undefined ?\n            Object.getOwnPropertyNames(prop)\n                .map(p => createSetNode(p, prop[p])) :\n            [createSetNode(prop, value)];\n        this[nodeSymbol].values.add(...setNodes);\n    }),\n    build(params = {}, offset = 1) {\n        const { table, with: withC, values, from, where, returning } = this[nodeSymbol];\n        const queryNode = compositeNode();\n        const add = eventuallyAddComposite(queryNode);\n        add(withC, 'with');\n        queryNode.add('UPDATE', table, 'SET', values);\n        add(from, 'from');\n        add(where, 'where');\n        add(returning, 'returning');\n        return queryNode.build(params, offset);\n    }\n}, withAsMixin(), clauseMixin('returning', 'from', 'table'));\nexport const update = (tableName) => {\n    const nodes = {\n        where: compositeNode(),\n        table: compositeNode({ separator: ', ' }),\n        returning: compositeNode({ separator: ', ' }),\n        from: compositeNode({ separator: ', ' }),\n        values: compositeNode({ separator: ', ' }),\n        with: compositeNode({ separator: ', ' })\n    };\n    const instance = Object.create(Object.assign({\n        clone() {\n            const clone = update(tableName);\n            for (const [key, value] of Object.entries(nodes)) {\n                clone.node(key, value.clone());\n            }\n            return Object.assign(clone, this);\n        }\n    }, proto), {\n        [nodeSymbol]: {\n            value: nodes\n        }\n    });\n    return instance.table(tableName);\n};\n","import { compositeNode, identityNode, pointerNode, valueNode } from '../lib/nodes';\nimport { eventuallyAddComposite, fluentMethod } from '../lib/util';\nimport { clauseMixin, nodeSymbol } from './clause';\nimport { withAsMixin } from './with';\nconst createValuesNode = (props) => item => {\n    const valuesNode = compositeNode({ separator: ', ' });\n    for (const prop of props) {\n        valuesNode.add(item[prop] === undefined ?\n            identityNode('DEFAULT') :\n            valueNode(item[prop]));\n    }\n    return compositeNode().add('(', valuesNode, ')');\n};\nconst proto = Object.assign({\n    values: fluentMethod(function (item) {\n        const items = Array.isArray(item) ? item : [item];\n        const mapFn = createValuesNode(this.fields);\n        for (const i of items) {\n            this[nodeSymbol].values.add(mapFn(i));\n        }\n    }),\n    build(params = {}, offset = 1) {\n        const queryNode = compositeNode();\n        const add = eventuallyAddComposite(queryNode);\n        const { into, with: withc, values, returning } = this[nodeSymbol];\n        const fieldsNode = compositeNode({ separator: ', ' }).add(...this.fields.map(pointerNode));\n        add(withc, 'with');\n        queryNode.add('INSERT INTO', into, '(', fieldsNode, ')', 'VALUES', values);\n        add(returning, 'returning');\n        return queryNode.build(params, offset);\n    }\n}, withAsMixin(), clauseMixin('into', 'returning'));\nexport const insert = (map, ...othersProps) => {\n    const fields = typeof map === 'string' ? [map].concat(othersProps) : Object.keys(map);\n    const nodes = {\n        into: compositeNode({ separator: ', ' }),\n        returning: compositeNode({ separator: ', ' }),\n        values: compositeNode({ separator: ', ' }),\n        with: compositeNode({ separator: ', ' })\n    };\n    const instance = Object.create(Object.assign({\n        clone() {\n            const clone = insert(map, ...othersProps);\n            for (const [key, value] of Object.entries(nodes)) {\n                clone.node(key, value.clone());\n            }\n            return clone;\n        }\n    }, proto), {\n        [nodeSymbol]: {\n            value: nodes\n        },\n        fields: { value: fields }\n    });\n    if (typeof map !== 'string') {\n        instance.values(map);\n    }\n    return instance;\n};\n","import { compositeNode } from '../lib/nodes';\nimport { clauseMixin, nodeSymbol } from './clause';\nimport where from './where';\nimport { eventuallyAddComposite, fluentMethod } from '../lib/util';\nimport { withAsMixin } from './with';\nconst proto = Object.assign({\n    where,\n    noop: fluentMethod(function () {\n    }),\n    from(...args) {\n        return this.table(...args);\n    },\n    build(params = {}, offset = 1) {\n        const { table, with: withc, using, where, returning } = this[nodeSymbol];\n        const queryNode = compositeNode();\n        const add = eventuallyAddComposite(queryNode);\n        add(withc, 'with');\n        queryNode.add('DELETE FROM', table);\n        add(using, 'using');\n        add(where, 'where');\n        add(returning, 'returning');\n        return queryNode.build(params, offset);\n    }\n}, withAsMixin(), clauseMixin('table', 'using', 'returning'));\nexport const del = (tableName) => {\n    const nodes = {\n        returning: compositeNode({ separator: ', ' }),\n        using: compositeNode({ separator: ', ' }),\n        table: compositeNode(),\n        where: compositeNode(),\n        with: compositeNode({ separator: ', ' })\n    };\n    const instance = Object.create(Object.assign({\n        clone() {\n            const clone = del(tableName);\n            for (const [key, value] of Object.entries(nodes)) {\n                clone.node(key, value.clone());\n            }\n            return clone;\n        }\n    }, proto), {\n        [nodeSymbol]: {\n            value: nodes\n        }\n    });\n    if (tableName) {\n        instance.from(tableName);\n    }\n    return instance;\n};\n","import { functionNode } from './nodes';\nconst aggregateFunc = (fn) => (field) => functionNode(fn)\n    .add(field);\nexport const count = aggregateFunc('count');\nexport const avg = aggregateFunc('avg');\nexport const sum = aggregateFunc('sum');\nexport const toJson = aggregateFunc('to_json');\nexport const toJsonb = aggregateFunc('to_jsonb');\nexport const jsonAgg = aggregateFunc('json_agg');\n","import { functionNode } from './nodes';\nexport const coalesce = (values, as) => {\n    return functionNode('COALESCE', as)\n        .add(...values);\n};\n"],"names":["proto"],"mappings":"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"}